doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    link(href="https://fonts.googleapis.com/css2?family=Epilogue:ital,wght@0,100..900;1,100..900&family=Euphoria+Script&display=swap" rel="stylesheet")
    link(href="/css/upload.css", rel="stylesheet")
    link(href="/css/reusable.css" rel="stylesheet")
    title Book Upload - BookOrbit

  body
    .top-navbar
      h1.logo-text BookOrbit
      h1.text-xl.font-semibold.pl-3 Dashboard
      .flex.items-center.gap-4.ml-auto
        button.relative
          //- i.fas.fa-bell
          //- span.notification-badge 1
        .w-8.h-8.rounded-full.overflow-hidden(style="background-color: #dccdbe;")
          img(src="https://placehold.co/30x30/dccdbe/ffffff?text=U" alt="User")#profile-picture
    .flex
      //- Sidebar
      .sidebar
        .sidebar-menu
          button.sidebar-button(title="Dashboard")
            svg(xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
              rect(width="7" height="7" x="3" y="3" rx="1")
              rect(width="7" height="7" x="14" y="3" rx="1")
              rect(width="7" height="7" x="14" y="14" rx="1")
              rect(width="7" height="7" x="3" y="14" rx="1")
          button.sidebar-button(title="Upload")
            svg(xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
              path(d="m5 12 7-7 7 7")
              path(d="M12 19V5")
          button.sidebar-button(title="Files")
            svg(xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
              path(d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4")
              polyline(points="17 8 12 3 7 8")
              line(x1="12" x2="12" y1="3" y2="15")
          button.sidebar-button(title="Users")
            svg(xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
              path(d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2")
              circle(cx="9" cy="7" r="4")
              path(d="M22 21v-2a4 4 0 0 0-3-3.87")
              path(d="M16 3.13a4 4 0 0 1 0 7.75")
          .divider
          button.sidebar-button(title="Settings")
            svg(xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
              path(d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z")
              circle(cx="12" cy="12" r="3")
          button.sidebar-button(title="Refresh" style="margin-top: auto;")
            svg(xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
              path(d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8")
              path(d="M3 3v5h5")

      //- Main Content
      .main-content
        //- Add modal HTML structure
        .modal#errorModal
          .modal-content
            .modal-header
              h3 Error
              button.close-modal Ã—
            .modal-body
              p#errorMessage
        //- Form Content
        .form-container
          .form-header
            h2.form-title Upload Book
            button.back-button
              svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
                path(d="m12 19-7-7 7-7")
                path(d="M19 12H5")

          form.form#bookUploadForm
            //- Book Image Upload
            .image-upload
              .image-upload-container#imageUpload
                svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
                  path(d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4")
                  polyline(points="17 8 12 3 7 8")
                  line(x1="12" x2="12" y1="3" y2="15")
                p.image-upload-text Add Book image

            //- Form Fields
            .form-fields
              .form-grid
                div
                  input.input(type="text" placeholder="Book name" name="title" required)
                div
                  input.input(type="text" placeholder="Author's name" name="author" required)
                div
                  input.input(type="text" placeholder="Publishing Company name" name="publishing_company" required)
                div
                  input.input(type="text" placeholder="ISBN Number" name="isbn" required)
                div
                  input.input(type="number" placeholder="Year of Publication" name="year_of_publication" required)
                div
                  input.input(type="number" placeholder="Number of pages" name="number_of_pages" required)
                div
                  input.input(type="text" placeholder="Genre" name="genre" required)
                div
                  input.input(type="number" placeholder="Number of copies" name="no_of_copies" required)
                
                .textarea-container
                  textarea.textarea(placeholder="Details about book" name="description" required)
                  .word-count 50-500 words
                
                .textarea-container
                  textarea.textarea(placeholder="About author" name="about_author" required)
                  .word-count 50-500 words
                
                .submit-container
                  button.submit-button(type="submit") Upload book 

  script.
    document.addEventListener('DOMContentLoaded', async function() {
      let image = null;
      // Form submission
      const form = document.getElementById('bookUploadForm');
      form.addEventListener('submit', async function(e) {
        e.preventDefault();

        if (!image) {
          const imageContainer = document.getElementById('imageUpload');
          imageContainer.classList.add('error');

          setTimeout(() => {
            imageContainer.classList.remove('error');
          }, 2000);
          return;
        }
        const formData = new FormData(form);
        const bookDetails = { image: image.split(',')[1] };
        
        for (const [key, value] of formData.entries()) {
          bookDetails[key] = value;
        }
        
        console.log('Book details submitted:', bookDetails);
        // Handle form submission logic here

        try {
          const submitButton = document.querySelector('.submit-button');
          submitButton.classList.add('loading');
          const response = await fetch('/admin/create-book', {
            method: 'POST',
            body: JSON.stringify(bookDetails),
            headers: {
              'Content-Type': 'application/json'
            }
          });

          submitButton.classList.remove('loading');

          if (!response.ok) {
            throw new Error('Failed to submit book details');
          }
          
          const data = await response.json();
          const { book } = data;
          window.location.href = `/admin/upload-successful?book-id=${book.book_id}`;
        } catch (error) {
          console.error('Error submitting book details:', error);
          // Replace alert with modal
          const modal = document.getElementById('errorModal');
          const errorMessage = document.getElementById('errorMessage');
          errorMessage.textContent = 'Error submitting book details. Please try again.';
          modal.style.display = 'block';

          // Close modal when clicking the close button
          document.querySelector('.close-modal').onclick = function() {
            modal.style.display = 'none';
          }

          // Close modal when clicking outside
          window.onclick = function(event) {
            if (event.target === modal) {
              modal.style.display = 'none';
            }
          }
        }
      
      });
      
      // Image upload
      const imageUpload = document.getElementById('imageUpload');
      imageUpload.addEventListener('click', function() {
        // Create a file input element
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*';
        
        fileInput.addEventListener('change', function(e) {
          if (e.target.files && e.target.files[0]) {
            const reader = new FileReader();
            
            reader.onload = function(event) {
              // Create an image element
              const img = document.createElement('img');
              img.src = event.target.result;
              img.style.width = '100%';
              img.style.height = '100%';
              img.style.objectFit = 'cover';
              
              // Clear the upload container and append the image
              imageUpload.innerHTML = '';
              imageUpload.appendChild(img);

              //image to base64
              image = event.target.result;
            };
            
            reader.readAsDataURL(e.target.files[0]);
          }
        });
        
        fileInput.click();
      });
      
      // Word count for textareas
      const textareas = document.querySelectorAll('.textarea');
      textareas.forEach(textarea => {
        textarea.addEventListener('input', function() {
          const wordCount = this.value.trim().split(/\s+/).filter(Boolean).length;
          const countDisplay = this.parentElement.querySelector('.word-count');
          countDisplay.textContent = `${wordCount}/500 words`;
        });
      });
    });