//- Book Details Page
extends layout

block content
  div(class="container mx-auto px-4 sm:px-6 py-8")
    div#bookDetails(class="flex flex-col lg:flex-row gap-8 min-h-screen")
      //- Left Column - Book Cover and Actions
      div(class="w-full lg:w-1/3 space-y-6")
        //- Book Cover Card
        div(class="bg-white shadow-lg rounded-xl overflow-hidden")
          div(class="relative w-full aspect-[3/4] overflow-hidden")
            img#bookImage(
              class="w-full h-full object-cover"
              src="/images/default-book-cover.jpg"
              alt="Book Cover"
              onerror="this.src='/images/default-book-cover.jpg'"
            )
          div(class="p-6 space-y-4")
            div(class="flex justify-between items-center")
              span#availabilityBadge(class="px-4 py-1 text-sm font-medium rounded-full")
              div(class="flex gap-3")
                button#likeBtn(
                  class="action-button transition-colors duration-200"
                  onclick="toggleLike()"
                )
                  i(class="far fa-heart text-xl")
                button#starBtn(
                  class="action-button transition-colors duration-200"
                  onclick="toggleStar()"
                )
                  i(class="far fa-star text-xl")
            
            if user
              div#borrowSection(class="mt-6")
                if bookData && !bookData.userBorrowed
                  div(class="space-y-4")
                    div(class="form-group")
                      label(
                        class="block text-sm font-medium text-gray-700 mb-2"
                        for="rentalDuration"
                      ) Rental Duration
                      select#rentalDuration(
                        class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      )
                        option(value='7') 7 days
                        option(value='14' selected) 14 days
                        option(value='21') 21 days
                        option(value='30') 30 days
                    div(class="pricing-info bg-gray-50 p-4 rounded-lg")
                      p(class="text-sm text-gray-600 flex justify-between")
                        span Daily Rate:
                        span#rentalPrice(class="font-medium")
                      p(class="text-sm text-gray-600 flex justify-between mt-2")
                        span Total Cost:
                        span#totalPrice(class="font-medium")
                    button#borrowBtn(
                      class="w-full py-3 px-4 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                    ) Borrow Now
                else
                  div(class="space-y-4")
                    div(class="bg-blue-50 p-4 rounded-lg")
                      p(class="text-sm text-gray-600 flex justify-between")
                        span Due Date:
                        span#dueDate(class="font-medium")
                      p(class="text-sm text-gray-600 flex justify-between mt-2")
                        span Days Remaining:
                        span#daysRemaining(class="font-medium")
                    button#returnBtn(
                      class="w-full py-3 px-4 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
                    ) Return Book
                div#lateFeeAlert(class="mt-4 bg-yellow-50 border-l-4 border-yellow-400 p-4 hidden")
                  div(class="flex")
                    div(class="flex-shrink-0")
                      i(class="fas fa-exclamation-triangle text-yellow-400")
                    div(class="ml-3")
                      p(class="text-sm text-yellow-700")

      //- Right Column - Book Details
      div(class="flex-1 space-y-6")
        h1#bookTitle(class="text-3xl font-bold text-gray-900 mb-8")
        
        //- Author Section
        div(class="bg-white shadow-lg rounded-xl p-6")
          h2(class="text-xl font-semibold text-gray-900 mb-4") About the Author
          p#bookAuthor(class="text-gray-700 font-medium mb-3")
          p#aboutAuthor(class="text-gray-600 leading-relaxed")
        
        //- Description Section
        div(class="bg-white shadow-lg rounded-xl p-6")
          h2(class="text-xl font-semibold text-gray-900 mb-4") Description
          p#bookDescription(class="text-gray-600 leading-relaxed")
        
        div(class="grid grid-cols-1 md:grid-cols-2 gap-6")
          //- Book Details
          div(class="bg-white shadow-lg rounded-xl p-6")
            h2(class="text-xl font-semibold text-gray-900 mb-4") Details
            ul(class="space-y-3")
              li(class="flex justify-between items-center py-2 border-b border-gray-100")
                span(class="text-gray-600") ISBN
                span#isbn(class="font-medium text-gray-900")
              li(class="flex justify-between items-center py-2 border-b border-gray-100")
                span(class="text-gray-600") Genre
                span#genre(class="font-medium text-gray-900")
              li(class="flex justify-between items-center py-2 border-b border-gray-100")
                span(class="text-gray-600") Publisher
                span#publisher(class="font-medium text-gray-900")
              li(class="flex justify-between items-center py-2 border-b border-gray-100")
                span(class="text-gray-600") Year
                span#year(class="font-medium text-gray-900")
              li(class="flex justify-between items-center py-2")
                span(class="text-gray-600") Pages
                span#pages(class="font-medium text-gray-900")
          
          //- Availability
          div(class="bg-white shadow-lg rounded-xl p-6")
            h2(class="text-xl font-semibold text-gray-900 mb-4") Availability
            ul(class="space-y-3")
              li(class="flex justify-between items-center py-2 border-b border-gray-100")
                span(class="text-gray-600") Total Copies
                span#totalCopies(class="font-medium text-gray-900")
              li(class="flex justify-between items-center py-2 border-b border-gray-100")
                span(class="text-gray-600") Available Copies
                span#availableCopies(class="font-medium text-gray-900")
              li(class="flex justify-between items-center py-2")
                span(class="text-gray-600") Daily Rental Price
                span#dailyRentalPrice(class="font-medium text-gray-900")

block scripts
  script(src="/js/book-details.js")
  script.
    let bookData = null;
    
    async function fetchBookDetails() {
      const loadingStates = {
        start() {
          const bookDetails = document.getElementById('bookDetails');
          if (bookDetails) {
            bookDetails.classList.add('opacity-50', 'relative');
            const spinner = document.createElement('div');
            spinner.id = 'loading-spinner';
            spinner.className = 'absolute inset-0 flex items-center justify-center';
            spinner.innerHTML = `
              <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600"></div>
            `;
            bookDetails.appendChild(spinner);
          }
        },
        end() {
          const bookDetails = document.getElementById('bookDetails');
          if (bookDetails) {
            bookDetails.classList.remove('opacity-50', 'relative');
            const spinner = document.getElementById('loading-spinner');
            if (spinner) spinner.remove();
          }
        }
      };

      try {
        loadingStates.start();
        const bookId = window.location.pathname.split('/').pop();
        
        const response = await fetch(`/api/books/${bookId}`);
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to fetch book details');
        }
        
        bookData = await response.json();
        
        if (!bookData) {
          throw new Error('No book data received');
        }

        // Update UI with book details
        const elements = {
          title: document.getElementById('bookTitle'),
          author: document.getElementById('bookAuthor'),
          aboutAuthor: document.getElementById('aboutAuthor'),
          description: document.getElementById('bookDescription'),
          isbn: document.getElementById('isbn'),
          genre: document.getElementById('genre'),
          publisher: document.getElementById('publisher'),
          year: document.getElementById('year'),
          pages: document.getElementById('pages'),
          totalCopies: document.getElementById('totalCopies'),
          availableCopies: document.getElementById('availableCopies'),
          dailyRentalPrice: document.getElementById('dailyRentalPrice')
        };

        // Safely update elements with proper null checks
        Object.entries(elements).forEach(([key, element]) => {
          if (element && bookData[key] !== undefined) {
            element.textContent = bookData[key] || 'N/A';
          }
        });

        // Handle special cases
        if (elements.year && bookData.year_of_publication) {
          elements.year.textContent = bookData.year_of_publication;
        }
        if (elements.publisher && bookData.publishing_company) {
          elements.publisher.textContent = bookData.publishing_company;
        }
        if (elements.pages && bookData.number_of_pages) {
          elements.pages.textContent = bookData.number_of_pages;
        }

        // Update book image with fallback
        const bookImage = document.getElementById('bookImage');
        if (bookImage) {
          bookImage.src = bookData.cover_image || '/images/default-book-cover.jpg';
          bookImage.onerror = () => {
            bookImage.src = '/images/default-book-cover.jpg';
          };
        }

        // Update availability badge
        const availabilityBadge = document.getElementById('availabilityBadge');
        if (availabilityBadge) {
          const isAvailable = bookData.no_of_copies_available > 0;
          availabilityBadge.className = `px-4 py-1 text-sm font-medium rounded-full ${
            isAvailable ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
          }`;
          availabilityBadge.textContent = isAvailable ? 'Available' : 'Not Available';
        }

        // Update like/star buttons
        updateLikeButton(bookData.isLiked);
        updateStarButton(bookData.isStarred);
        
        // Update borrow/return section
        updateBorrowReturnSection(bookData);
        
        // Set up rental duration change handler
        const rentalDuration = document.getElementById('rentalDuration');
        if (rentalDuration) {
          rentalDuration.addEventListener('change', updateRentalPrice);
          updateRentalPrice(); // Initial calculation
        }

        // Show late fee alert if applicable
        const lateFeeAlert = document.getElementById('lateFeeAlert');
        if (lateFeeAlert && bookData.late_fee > 0) {
          lateFeeAlert.innerHTML = `
            <div class="flex">
              <div class="flex-shrink-0">
                <i class="fas fa-exclamation-triangle text-yellow-400"></i>
              </div>
              <div class="ml-3">
                <p class="text-sm text-yellow-700">
                  Late Fee: $${bookData.late_fee.toFixed(2)}
                </p>
              </div>
            </div>
          `;
          lateFeeAlert.classList.remove('hidden');
        }

        // Handle transaction status
        const borrowSection = document.getElementById('borrowSection');
        if (borrowSection && bookData.transaction_status) {
          const statusClasses = {
            'ACTIVE': 'text-blue-600',
            'OVERDUE': 'text-red-600',
            'COMPLETED': 'text-green-600',
            'EXPIRED': 'text-gray-600',
            'CANCELLED': 'text-gray-600'
          };
          
          const statusElement = document.getElementById('transactionStatus');
          if (statusElement) {
            statusElement.textContent = bookData.transaction_status;
            statusElement.className = `font-medium ${statusClasses[bookData.transaction_status] || 'text-gray-600'}`;
          }
        }
      } catch (error) {
        console.error('Error fetching book details:', error);
        showToast(error.message || 'Failed to load book details', 'error');
      } finally {
        loadingStates.end();
      }
    }
    
    function updateRentalPrice() {
      const duration = parseInt(document.getElementById('rentalDuration').value);
      const dailyPrice = parseFloat(bookData.rental_price) || 0;
      const totalPrice = dailyPrice * duration;
      
      document.getElementById('rentalPrice').textContent = `$${dailyPrice.toFixed(2)}`;
      document.getElementById('totalPrice').textContent = `$${totalPrice.toFixed(2)}`;
    }
    
    function updateBorrowReturnSection(bookData) {
      const borrowSection = document.getElementById('borrowSection');
      if (!borrowSection) return;
      
      if (bookData.userBorrowed) {
        const dueDate = new Date(bookData.rental_end_date);
        const today = new Date();
        const daysRemaining = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));
        
        document.getElementById('dueDate').textContent = dueDate.toLocaleDateString();
        document.getElementById('daysRemaining').textContent = daysRemaining;
        
        if (daysRemaining < 0) {
          document.getElementById('daysRemaining').classList.add('text-red-600');
        }
      }
    }
    
    async function borrowBook() {
      try {
        const duration = parseInt(document.getElementById('rentalDuration').value);
        const response = await fetch(`/user/books/${bookData.book_id}/borrow`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ rental_duration: duration })
        });
        
        const result = await response.json();
        
        if (response.ok) {
          bookData.no_of_copies_available--;
          bookData.userBorrowed = true;
          document.getElementById('availableCopies').textContent = bookData.no_of_copies_available;
          updateBorrowReturnSection(bookData);
          showToast(result.message);
        } else {
          showToast(result.error, 'error');
        }
      } catch (error) {
        console.error('Error borrowing book:', error);
        showToast('Failed to borrow book', 'error');
      }
    }
    
    async function returnBook() {
      try {
        const response = await fetch(`/user/books/${bookData.book_id}/return`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (response.ok) {
          bookData.no_of_copies_available++;
          bookData.userBorrowed = false;
          document.getElementById('availableCopies').textContent = bookData.no_of_copies_available;
          updateBorrowReturnSection(bookData);
          
          if (result.details.lateFee > 0) {
            const lateFeeAlert = document.getElementById('lateFeeAlert');
            lateFeeAlert.textContent = `Late Fee: $${result.details.lateFee.toFixed(2)}`;
            lateFeeAlert.classList.remove('hidden');
          }
          
          showToast(result.message);
        } else {
          showToast(result.error, 'error');
        }
      } catch (error) {
        console.error('Error returning book:', error);
        showToast('Failed to return book', 'error');
      }
    }
    
    function showToast(message, type = 'success') {
      const toastContainer = document.getElementById('toast-container') || createToastContainer();
      const toast = document.createElement('div');
      toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg text-white font-medium shadow-lg transform transition-all duration-300 ${
        type === 'success' ? 'bg-green-600' : 'bg-red-600'
      }`;
      toast.style.opacity = '0';
      toast.style.transform = 'translateY(1rem)';
      toast.textContent = message;
      
      toastContainer.appendChild(toast);
      
      //- Trigger animation
      requestAnimationFrame(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateY(0)';
      });

      //- Remove with animation
      setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(1rem)';
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }
    
    function createToastContainer() {
      const container = document.createElement('div');
      container.id = 'toast-container';
      container.className = 'fixed bottom-4 right-4 z-50 space-y-2';
      document.body.appendChild(container);
      return container;
    }
    
    function updateLikeButton(isLiked) {
      const likeBtn = document.getElementById('likeBtn');
      const icon = likeBtn.querySelector('i');
      icon.className = isLiked ? 'fas fa-heart text-red-500' : 'far fa-heart';
      likeBtn.classList.toggle('active', isLiked);
    }
    
    function updateStarButton(isStarred) {
      const starBtn = document.getElementById('starBtn');
      const icon = starBtn.querySelector('i');
      icon.className = isStarred ? 'fas fa-star text-yellow-500' : 'far fa-star';
      starBtn.classList.toggle('active', isStarred);
    }
    
    //- Initialize page
    document.addEventListener('DOMContentLoaded', fetchBookDetails); 