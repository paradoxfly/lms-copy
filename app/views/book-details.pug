extends layout

block content
  .container.px-6.py-4
    #bookDetails.flex.flex-col.lg:flex-row.gap-8
      // Left Column - Book Cover and Actions
      .w-full.lg:w-1/3
        .bg-white.border.rounded-xl.overflow-hidden
          img#bookImage.w-full.h-96.object-cover(src='/images/default-book.jpg' alt='Book Cover')
          .p-4
            .flex.justify-between.items-center.mb-4
              span#availabilityBadge.px-3.py-1.text-sm.rounded-full
              .flex.gap-2
                button#likeBtn.action-button(onclick='toggleLike()')
                  i.far.fa-heart
                button#starBtn.action-button(onclick='toggleStar()')
                  i.far.fa-star
            if user
              button#borrowReturnBtn.borrow-button.w-full.py-2.mb-2 Borrow
              #lateFeeAlert.bg-yellow-100.text-yellow-800.px-4.py-2.rounded-md.text-sm.hidden

      // Right Column - Book Details
      .flex-1
        h1#bookTitle.text-2xl.font-bold.mb-6
        
        .bg-white.border.rounded-xl.p-6.mb-6
          h2.text-lg.font-semibold.mb-4 About the Author
          p#bookAuthor.text-gray-600.mb-2
          p#aboutAuthor.text-gray-600
        
        .bg-white.border.rounded-xl.p-6.mb-6
          h2.text-lg.font-semibold.mb-4 Description
          p#bookDescription.text-gray-600
        
        .grid.grid-cols-1.md:grid-cols-2.gap-6
          // Book Details
          .bg-white.border.rounded-xl.p-6
            h2.text-lg.font-semibold.mb-4 Details
            ul.space-y-2
              li.flex.justify-between
                span.text-gray-600 ISBN
                span#isbn.font-medium
              li.flex.justify-between
                span.text-gray-600 Genre
                span#genre.font-medium
              li.flex.justify-between
                span.text-gray-600 Publisher
                span#publisher.font-medium
              li.flex.justify-between
                span.text-gray-600 Year
                span#year.font-medium
              li.flex.justify-between
                span.text-gray-600 Pages
                span#pages.font-medium
          
          // Availability
          .bg-white.border.rounded-xl.p-6
            h2.text-lg.font-semibold.mb-4 Availability
            ul.space-y-2
              li.flex.justify-between
                span.text-gray-600 Total Copies
                span#totalCopies.font-medium
              li.flex.justify-between
                span.text-gray-600 Available Copies
                span#availableCopies.font-medium

block scripts
  script.
    let bookData = null;
    
    async function fetchBookDetails() {
      try {
        const bookId = window.location.pathname.split('/').pop();
        const response = await fetch(`/api/books/${bookId}`);
        bookData = await response.json();
        
        // Update UI with book details
        document.getElementById('bookTitle').textContent = bookData.title;
        document.getElementById('bookAuthor').textContent = bookData.author;
        document.getElementById('aboutAuthor').textContent = bookData.about_author;
        document.getElementById('bookDescription').textContent = bookData.description;
        document.getElementById('isbn').textContent = bookData.isbn;
        document.getElementById('genre').textContent = bookData.genre;
        document.getElementById('publisher').textContent = bookData.publishing_company;
        document.getElementById('year').textContent = bookData.year_of_publication;
        document.getElementById('pages').textContent = bookData.number_of_pages;
        document.getElementById('totalCopies').textContent = bookData.no_of_copies;
        document.getElementById('availableCopies').textContent = bookData.no_of_copies_available;
        
        if (bookData.image) {
          document.getElementById('bookImage').src = bookData.image;
        }
        
        // Update availability badge
        const availabilityBadge = document.getElementById('availabilityBadge');
        if (bookData.no_of_copies_available > 0) {
          availabilityBadge.className = 'px-3 py-1 text-sm rounded-full bg-green-100 text-green-800';
          availabilityBadge.textContent = 'Available';
        } else {
          availabilityBadge.className = 'px-3 py-1 text-sm rounded-full bg-red-100 text-red-800';
          availabilityBadge.textContent = 'Not Available';
        }
        
        // Update like/star buttons
        updateLikeButton(bookData.isLiked);
        updateStarButton(bookData.isStarred);
        
        // Update borrow/return button
        updateBorrowReturnButton(bookData.userBorrowed);
        
      } catch (error) {
        console.error('Error fetching book details:', error);
      }
    }
    
    function updateLikeButton(isLiked) {
      const likeBtn = document.getElementById('likeBtn');
      const icon = likeBtn.querySelector('i');
      icon.className = isLiked ? 'fas fa-heart text-red-500' : 'far fa-heart';
      likeBtn.classList.toggle('active', isLiked);
    }
    
    function updateStarButton(isStarred) {
      const starBtn = document.getElementById('starBtn');
      const icon = starBtn.querySelector('i');
      icon.className = isStarred ? 'fas fa-star text-yellow-500' : 'far fa-star';
      starBtn.classList.toggle('active', isStarred);
    }
    
    function updateBorrowReturnButton(isBorrowed) {
      const btn = document.getElementById('borrowReturnBtn');
      if (isBorrowed) {
        btn.textContent = 'Return';
        btn.onclick = returnBook;
      } else {
        btn.textContent = 'Borrow';
        btn.onclick = borrowBook;
      }
      btn.disabled = !bookData.no_of_copies_available && !isBorrowed;
      btn.classList.toggle('opacity-50', btn.disabled);
    }
    
    async function toggleLike() {
      try {
        const response = await fetch(`/books/${bookData.book_id}/like`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        updateLikeButton(result.liked);
      } catch (error) {
        console.error('Error toggling like:', error);
      }
    }
    
    async function toggleStar() {
      try {
        const response = await fetch(`/books/${bookData.book_id}/star`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        updateStarButton(result.starred);
      } catch (error) {
        console.error('Error toggling star:', error);
      }
    }
    
    async function borrowBook() {
      try {
        const response = await fetch(`/books/${bookData.book_id}/borrow`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        if (response.ok) {
          bookData.no_of_copies_available--;
          document.getElementById('availableCopies').textContent = bookData.no_of_copies_available;
          updateBorrowReturnButton(true);
        } else {
          alert(result.error);
        }
      } catch (error) {
        console.error('Error borrowing book:', error);
      }
    }
    
    async function returnBook() {
      try {
        const response = await fetch(`/books/${bookData.book_id}/return`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        if (response.ok) {
          bookData.no_of_copies_available++;
          document.getElementById('availableCopies').textContent = bookData.no_of_copies_available;
          updateBorrowReturnButton(false);
          
          if (result.lateFee) {
            const lateFeeAlert = document.getElementById('lateFeeAlert');
            lateFeeAlert.textContent = `Late Fee: ${result.lateFee}`;
            lateFeeAlert.classList.remove('hidden');
          }
        } else {
          alert(result.error);
        }
      } catch (error) {
        console.error('Error returning book:', error);
      }
    }
    
    // Initialize
    document.addEventListener('DOMContentLoaded', fetchBookDetails); 